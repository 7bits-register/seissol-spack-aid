/*
Requirements:
    - spack
    - docker
    - python3
*/

properties([
    parameters([
        string(
            defaultValue: 'ubuntu:18.04', 
            description: 'Builder OS. Use images supported by Spack', 
            name: 'BUILDER_OS', 
            trim: true),
        string(
            defaultValue: '', 
            description: 'Target OS. If empty, TARGET_OS == BUILDER_OS', 
            name: 'TARGET_OS', 
            trim: true),
        string(
            defaultValue: '', 
            description: 'Target arch for building packages to for the resultant image. If empty, use arch of a jenkins runner (deduced with Spack)', 
            name: 'IMAGE_HOST_ARCH', 
            trim: true),
        string(
            defaultValue: 'gcc@8.3.0', 
            description: 'Target compiler suite which is going to be used for building packages. Use Spack syntax', 
            name: 'TARGET_COMPILER', 
            trim: true),
        string(
            defaultValue: 'openmpi@3.1.5', 
            description: 'Target MPI. Provide a version and constrains with Spack syntax', 
            name: 'TARGET_MPI', 
            trim: true),
        booleanParam(
            defaultValue: false, 
            description: 'whether to push the resultant image to docker hub', 
            name: 'PUSH_TO_DOCKER_HUB'),
        booleanParam(
            defaultValue: false, 
            description: 'whether to adjust the resultant image to singularity engine', 
            name: 'SINGULARITY_SUPPORT')
    ])
])

pipeline {
    agent any

    stages {
        
        stage('RefineInputeParams') {
            steps {
                script {
                    targetOsParam = "unknown"
                    if (env.TARGET_OS) {
                        targetOsParam = env.TARGET_OS
                    }
                    else {
                        // use builder os if the target os has not been provided
                        targetOsParam = env.BUILDER_OS
                    }
                }

                script {
                    imageHostArchParam = "unknown"
                    if (env.IMAGE_HOST_ARCH) {
                        imageHostArchParam = env.IMAGE_HOST_ARCH
                    }
                    else {
                        // user jenkins arch if it is not provided by the user
                        imageHostArchParam = sh(script:'spack arch -t', returnStdout: true).trim()
                    }
                }

                script {
                    // generate names for builder and env images
                    // trim removes leading and trailing whitespace from the string
                    builderImageName = 'spack_custom_builder:' +
                                     generateBuilderTag(env.BUILDER_OS, env.TARGET_COMPILER).trim();
                    
                    envImageName = 'seissol-env:' +
                                 generateImageTag(targetOsParam, env.TARGET_COMPILER, imageHostArchParam, env.TARGET_MPI).trim();
                }
            }
        }

        stage('CleanWorkspace') {
            steps {
                deleteDir()
            }
        }

        stage('Clone') {
            environment {
                TRIMMED_BRANCH = sh(script:'echo ${GIT_BRANCH##origin/}', returnStdout: true).trim()
            }
            steps {
                git branch: "${env.TRIMMED_BRANCH}", url: "${GIT_URL}"
            }
        }

        stage('Generate') {
            steps{
                dir("spack_support/automatic_delivery") {
                    sh 'mkdir build'
                    
                    // fill templated spack.yaml.t file with the actual values provided by the user 
                    sh "python3 ./concretize.py -i ./templates -o ./build -c ${TARGET_COMPILER} --mpi ${TARGET_MPI} --os ${BUILDER_OS} -a ${imageHostArchParam}"
                   
                    dir("build") {
                        sh "spack containerize > ./Dockerfile.env"

                        echo "${builderImageName}"
                        echo "${envImageName}"

                        // substitute the default spack builder os to the one built in the previous step
                        sh "sed -i 's/\\(FROM \\)\\(.*\\)\\( as builder\\)/\\1${builderImageName}\\3/' ./Dockerfile.env"

                        // substitute the resultant os from spack-default to the one provided by the user
                        script {
                            TARGET_OS_REGEX = adjustToRegex(targetOsParam)
                        }
                        
                        sh "sed -i 's/\\(FROM \\)\\([[:alpha:]]\\+:[[:digit:]]\\+\\.[[:digit:]]\\+\\)/\\1${TARGET_OS_REGEX}/' ./Dockerfile.env"

                        // print out the generated file
                        sh "cat ./Dockerfile.env"
                    }
                }
            }
        }

        stage('Build custom spack image') {
            steps{
                dir("spack_support") {
                    echo 'building ...'
                    script {
                        builderImage = docker.build("${builderImageName}", "-f ./automatic_delivery/build/Dockerfile.spack .")
                        envImage = docker.build("ravilmobile/${envImageName}", "-f ./automatic_delivery/build/Dockerfile.env .")
                    }
                }
            }
        }

        stage('PushToDocker') {
            when {
                expression {
                    env.PUSH_TO_DOCKER_HUB.toBoolean() == true
                }
            }
            steps{
                sh 'echo "push to dockerhub"'
                script {
                    envImage.push()
                }
            }
        }
    }
    post { 
        always {
            sh 'echo "end..."'
        }
    }
}

// AUX functions
String adjustToRegex(String str) {
    return str.replaceAll("/","\\\\/");
}


String compose(String str1, String str2) {
    return str1 + '_' + str2
}

String removeVersionAndConstrains(String spec) {
    def components = spec.replace('@', '-').split('[\\^\\+]')
    return components[0]
}


String generateBuilderTag(String os, String compiler, String arch = "") {
    suffix = ""
    if (arch.isAllWhitespace()) {
        suffix = removeVersionAndConstrains(compiler)
    }
    else {
        suffix = compose(arch, removeVersionAndConstrains(compiler))
    }
    return compose(os.replaceAll("[:/]", '-'), suffix)
}


void generateImageTag(String os, String compiler, String arch, String mpi) {
    return compose(generateBuilderTag(os, compiler, arch), removeVersionAndConstrains(mpi))
}
