pipeline {
    agent {label 'master'}
    stages {
        stage('CleanWorkspace') {
            steps {
                deleteDir()
            }
        }


        stage('Clone') {
            environment {
                TRIMMED_BRANCH = sh(script:'echo ${GIT_BRANCH##origin/}', returnStdout: true).trim()
            }
            steps {
                git branch: "${env.TRIMMED_BRANCH}", url: "${GIT_URL}"
                script {
                    remoteCacheDir = "~/.seissol-aid"
                }
            }
        }

        //stage ('BuildBaseImages') {
            //parallel {
                stage('Build_amd64') {
                    steps {
                        build job: 'env-utils-image', parameters: [
                        string(name: 'OS', value: 'ubuntu-1804'),
                        string(name: 'SPACK_VERSION', value: 'latest'),
                        string(name: 'ARCH_FAMILY', value: 'amd64'),
                        string(name: 'ARCH', value: ''),
                        string(name: 'TARGET_COMPILER', value: 'gcc@8.3.0'),
                        string(name: 'TARGET_MPI', value: 'openmpi@3.1.5+cuda'),
                        string(name: 'TARGET_GPU', value: 'cuda@10.1.243'),
                        string(name: 'CACHE_DIR', value: "${remoteCacheDir}"),
                        booleanParam(name: 'SINGULARITY_PUSH', value: true),
                        booleanParam(name: 'FORCED_BUILD', value: false),
                        string(name: 'AGENT', value: "runner")
                        ]
                    }
                }
                /*
                stage('Build_arm64') {
                    steps {
                        build job: 'env-utils-image', parameters: [
                        string(name: 'OS', value: 'ubuntu-1804'),
                        string(name: 'SPACK_VERSION', value: 'latest'),
                        string(name: 'ARCH_FAMILY', value: 'arm64'),
                        string(name: 'ARCH', value: ''),
                        string(name: 'TARGET_COMPILER', value: 'gcc@8.3.0'),
                        string(name: 'TARGET_MPI', value: 'openmpi@3.1.5+cuda'),
                        string(name: 'TARGET_GPU', value: 'cuda@11.0.2'),
                        string(name: 'CACHE_DIR', value: "${remoteCacheDir}"),
                        booleanParam(name: 'SINGULARITY_PUSH', value: true),
                        booleanParam(name: 'FORCED_BUILD', value: true)
                        ]
                    }
                }
                stage('Build_ppc64le') {
                    steps {
                        build job: 'env-utils-image', parameters: [
                        string(name: 'OS', value: 'ubuntu-1804'),
                        string(name: 'SPACK_VERSION', value: 'latest'),
                        string(name: 'ARCH_FAMILY', value: 'ppc64le'),
                        string(name: 'ARCH', value: ''),
                        string(name: 'TARGET_COMPILER', value: 'gcc@8.3.0'),
                        string(name: 'TARGET_MPI', value: 'openmpi@3.1.5+cuda'),
                        string(name: 'TARGET_GPU', value: 'cuda@10.1.243'),
                        string(name: 'CACHE_DIR', value: "${remoteCacheDir}"),
                        booleanParam(name: 'SINGULARITY_PUSH', value: true),
                        booleanParam(name: 'FORCED_BUILD', value: true)
                        ]
                    }
                }
                */

            //}
        //}

        stage('StashingOnRunner') {
            agent {label 'runner'}
            steps {
                sh 'mkdir -p ./generated-files'
                sh "cp -r ${remoteCacheDir}/* ./generated-files"
                stash name: "generatedFiles", includes: 'generated-files/**/*', excludes: 'generated-files/**/*.sif'
            }
        }


        stage('UnstashingOnMaster') {
            steps {
                dir('image-files') {
                    unstash "generatedFiles"
                }
                script {
                    changedFiles = sh (script: "git status --porcelain ./image-files", returnStdout: true).trim()
                }
            }
        }


        stage('CommitChanges') {
            when {
                expression {
                    !changedFiles.isAllWhitespace()
                }
            }
            steps {
                script {
                    branchName = "${env.GIT_BRANCH}"
                    branchName = branchName.replaceFirst(".+/", "")
                    withCredentials([usernamePassword(credentialsId: 'github-repo',
                                                      usernameVariable: 'GIT_USERNAME',
                                                      passwordVariable: 'GIT_PASSWORD')]){
                        sh """
                        git branch -v
                        git config --local credential.helper "!p() { echo username=\\$GIT_USERNAME; echo password=\\$GIT_PASSWORD; }; p"
                        git add image-files
                        git commit -m \"commited by Jenkins: build #${env.BUILD_ID}\"
                        git push origin ${branchName}:${branchName}
                        """
                    }
                }
            }
        }
    }

    post { 
        always {
            sh 'echo "end..."'
        }
    }
}